{"ast":null,"code":"import _asyncToGenerator from \"/Users/daoduchuy/Learning Ionic/LoginCarmdDemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nimport { VideoPlayer } from './web-utils/videoplayer';\nexport class CapacitorVideoPlayerWeb extends WebPlugin {\n  constructor() {\n    super();\n    this._players = [];\n    this.addListeners();\n  }\n  echo(options) {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve({\n        result: true,\n        method: 'echo',\n        value: options\n      });\n    })();\n  }\n  /**\n   *  Player initialization\n   *\n   * @param options\n   */\n  initPlayer(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'initPlayer',\n          message: 'Must provide a capVideoPlayerOptions object'\n        });\n      }\n      _this.mode = options.mode ? options.mode : '';\n      if (_this.mode == null || _this.mode.length === 0) {\n        return Promise.resolve({\n          result: false,\n          method: 'initPlayer',\n          message: 'Must provide a Mode (fullscreen/embedded)'\n        });\n      }\n      if (_this.mode === 'fullscreen' || _this.mode === 'embedded') {\n        const url = options.url ? options.url : '';\n        if (url == null || url.length === 0) {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Must provide a Video Url'\n          });\n        }\n        if (url == 'internal') {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Internal Videos not supported on Web Platform'\n          });\n        }\n        const playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Must provide a Player Id'\n          });\n        }\n        const rate = options.rate ? options.rate : 1.0;\n        let exitOnEnd = true;\n        if (Object.keys(options).includes('exitOnEnd')) {\n          const exitRet = options.exitOnEnd;\n          exitOnEnd = exitRet != null ? exitRet : true;\n        }\n        let loopOnEnd = false;\n        if (Object.keys(options).includes('loopOnEnd') && !exitOnEnd) {\n          const loopRet = options.loopOnEnd;\n          loopOnEnd = loopRet != null ? loopRet : false;\n        }\n        const componentTag = options.componentTag ? options.componentTag : '';\n        if (componentTag == null || componentTag.length === 0) {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Must provide a Component Tag'\n          });\n        }\n        let playerSize = null;\n        if (_this.mode === 'embedded') {\n          playerSize = _this.checkSize(options);\n        }\n        const result = yield _this._initializeVideoPlayer(url, playerId, _this.mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize);\n        return Promise.resolve({\n          result: result\n        });\n      } else {\n        return Promise.resolve({\n          result: false,\n          method: 'initPlayer',\n          message: 'Must provide a Mode either fullscreen or embedded)'\n        });\n      }\n    })();\n  }\n  /**\n   * Return if a given playerId is playing\n   *\n   * @param options\n   */\n  isPlaying(options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'isPlaying',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this2._players[playerId]) {\n        const playing = _this2._players[playerId].isPlaying;\n        return Promise.resolve({\n          method: 'isPlaying',\n          result: true,\n          value: playing\n        });\n      } else {\n        return Promise.resolve({\n          method: 'isPlaying',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Play the current video from a given playerId\n   *\n   * @param options\n   */\n  play(options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'play',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this3._players[playerId]) {\n        yield _this3._players[playerId].videoEl.play();\n        return Promise.resolve({\n          method: 'play',\n          result: true,\n          value: true\n        });\n      } else {\n        return Promise.resolve({\n          method: 'play',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Pause the current video from a given playerId\n   *\n   * @param options\n   */\n  pause(options) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'pause',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this4._players[playerId]) {\n        if (_this4._players[playerId].isPlaying) yield _this4._players[playerId].videoEl.pause();\n        return Promise.resolve({\n          method: 'pause',\n          result: true,\n          value: true\n        });\n      } else {\n        return Promise.resolve({\n          method: 'pause',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the duration of the current video from a given playerId\n   *\n   * @param options\n   */\n  getDuration(options) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getDuration',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this5._players[playerId]) {\n        const duration = _this5._players[playerId].videoEl.duration;\n        return Promise.resolve({\n          method: 'getDuration',\n          result: true,\n          value: duration\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getDuration',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the rate of the current video from a given playerId\n   *\n   * @param options\n   */\n  setRate(options) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setRate',\n          message: 'Must provide a capVideoRateOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      const rateList = [0.25, 0.5, 0.75, 1.0, 2.0, 4.0];\n      const rate = options.rate && rateList.includes(options.rate) ? options.rate : 1.0;\n      if (_this6._players[playerId]) {\n        _this6._players[playerId].videoEl.playbackRate = rate;\n        return Promise.resolve({\n          method: 'setRate',\n          result: true,\n          value: rate\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setRate',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the volume of the current video from a given playerId\n   *\n   * @param options\n   */\n  getRate(options) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getRate',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this7._players[playerId]) {\n        const rate = _this7._players[playerId].videoEl.playbackRate;\n        return Promise.resolve({\n          method: 'getRate',\n          result: true,\n          value: rate\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getRate',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the volume of the current video from a given playerId\n   *\n   * @param options\n   */\n  setVolume(options) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setVolume',\n          message: 'Must provide a capVideoVolumeOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      const volume = options.volume ? options.volume : 0.5;\n      if (_this8._players[playerId]) {\n        _this8._players[playerId].videoEl.volume = volume;\n        return Promise.resolve({\n          method: 'setVolume',\n          result: true,\n          value: volume\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setVolume',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the volume of the current video from a given playerId\n   *\n   * @param options\n   */\n  getVolume(options) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getVolume',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this9._players[playerId]) {\n        const volume = _this9._players[playerId].videoEl.volume;\n        return Promise.resolve({\n          method: 'getVolume',\n          result: true,\n          value: volume\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getVolume',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the muted property of the current video from a given playerId\n   *\n   * @param options\n   */\n  setMuted(options) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setMuted',\n          message: 'Must provide a capVideoMutedOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      const muted = options.muted ? options.muted : false;\n      if (_this10._players[playerId]) {\n        _this10._players[playerId].videoEl.muted = muted;\n        return Promise.resolve({\n          method: 'setMuted',\n          result: true,\n          value: muted\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setMuted',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the muted property of the current video from a given playerId\n   *\n   * @param options\n   */\n  getMuted(options) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getMuted',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this11._players[playerId]) {\n        const muted = _this11._players[playerId].videoEl.muted;\n        return Promise.resolve({\n          method: 'getMuted',\n          result: true,\n          value: muted\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getMuted',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the current time of the current video from a given playerId\n   *\n   * @param options\n   */\n  setCurrentTime(options) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setCurrentTime',\n          message: 'Must provide a capVideoTimeOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      let seekTime = options.seektime ? options.seektime : 0;\n      if (_this12._players[playerId]) {\n        const duration = _this12._players[playerId].videoEl.duration;\n        seekTime = seekTime <= duration && seekTime >= 0 ? seekTime : duration / 2;\n        _this12._players[playerId].videoEl.currentTime = seekTime;\n        return Promise.resolve({\n          method: 'setCurrentTime',\n          result: true,\n          value: seekTime\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setCurrentTime',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the current time of the current video from a given playerId\n   *\n   * @param options\n   */\n  getCurrentTime(options) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getCurrentTime',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n      let playerId = options.playerId ? options.playerId : '';\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n      if (_this13._players[playerId]) {\n        const seekTime = _this13._players[playerId].videoEl.currentTime;\n        return Promise.resolve({\n          method: 'getCurrentTime',\n          result: true,\n          value: seekTime\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getCurrentTime',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the current time of the current video from a given playerId\n   *\n   */\n  stopAllPlayers() {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      for (const i in _this14._players) {\n        if (_this14._players[i].pipMode) {\n          const doc = document;\n          if (doc.pictureInPictureElement) {\n            yield doc.exitPictureInPicture();\n          }\n        }\n        if (!_this14._players[i].videoEl.paused) _this14._players[i].videoEl.pause();\n      }\n      return Promise.resolve({\n        method: 'stopAllPlayers',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  /**\n   * Show controller\n   *\n   */\n  showController() {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve({\n        method: 'showController',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  /**\n   * isControllerIsFullyVisible\n   *\n   */\n  isControllerIsFullyVisible() {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve({\n        method: 'isControllerIsFullyVisible',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  /**\n   * Exit the current player\n   *\n   */\n  exitPlayer() {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve({\n        method: 'exitPlayer',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  checkSize(options) {\n    const playerSize = {\n      width: options.width ? options.width : 320,\n      height: options.height ? options.height : 180\n    };\n    const ratio = playerSize.height / playerSize.width;\n    if (playerSize.width > window.innerWidth) {\n      playerSize.width = window.innerWidth;\n      playerSize.height = Math.floor(playerSize.width * ratio);\n    }\n    if (playerSize.height > window.innerHeight) {\n      playerSize.height = window.innerHeight;\n      playerSize.width = Math.floor(playerSize.height / ratio);\n    }\n    return playerSize;\n  }\n  _initializeVideoPlayer(url, playerId, mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const videoURL = url ? url.indexOf('%2F') == -1 ? encodeURI(url) : url : null;\n      if (videoURL === null) return Promise.resolve(false);\n      _this15.videoContainer = yield _this15._getContainerElement(playerId, componentTag);\n      if (_this15.videoContainer === null) return Promise.resolve({\n        method: 'initPlayer',\n        result: false,\n        message: 'componentTag or divContainerElement must be provided'\n      });\n      if (mode === 'embedded' && playerSize == null) return Promise.resolve({\n        method: 'initPlayer',\n        result: false,\n        message: 'playerSize must be defined in embedded mode'\n      });\n      if (mode === 'embedded') {\n        _this15._players[playerId] = new VideoPlayer('embedded', videoURL, playerId, rate, exitOnEnd, loopOnEnd, _this15.videoContainer, 2, playerSize.width, playerSize.height);\n        yield _this15._players[playerId].initialize();\n      } else if (mode === 'fullscreen') {\n        _this15._players['fullscreen'] = new VideoPlayer('fullscreen', videoURL, 'fullscreen', rate, exitOnEnd, loopOnEnd, _this15.videoContainer, 99995);\n        yield _this15._players['fullscreen'].initialize();\n      } else {\n        return Promise.resolve({\n          method: 'initPlayer',\n          result: false,\n          message: 'mode not supported'\n        });\n      }\n      return Promise.resolve({\n        method: 'initPlayer',\n        result: true,\n        value: true\n      });\n    })();\n  }\n  _getContainerElement(playerId, componentTag) {\n    return _asyncToGenerator(function* () {\n      const videoContainer = document.createElement('div');\n      videoContainer.id = `vc_${playerId}`;\n      if (componentTag != null && componentTag.length > 0) {\n        const cmpTagEl = document.querySelector(`${componentTag}`);\n        if (cmpTagEl === null) return Promise.resolve(null);\n        let container = null;\n        const shadowRoot = cmpTagEl.shadowRoot ? cmpTagEl.shadowRoot : null;\n        if (shadowRoot != null) {\n          container = shadowRoot.querySelector(`[id='${playerId}']`);\n        } else {\n          container = cmpTagEl.querySelector(`[id='${playerId}']`);\n        }\n        if (container != null) container.appendChild(videoContainer);\n        return Promise.resolve(videoContainer);\n      } else {\n        return Promise.resolve(null);\n      }\n    })();\n  }\n  handlePlayerPlay(data) {\n    this.notifyListeners('jeepCapVideoPlayerPlay', data);\n  }\n  handlePlayerPause(data) {\n    this.notifyListeners('jeepCapVideoPlayerPause', data);\n  }\n  handlePlayerEnded(data) {\n    var _a;\n    if (this.mode === 'fullscreen') {\n      (_a = this.videoContainer) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    this.removeListeners();\n    this.notifyListeners('jeepCapVideoPlayerEnded', data);\n  }\n  handlePlayerExit() {\n    var _a;\n    if (this.mode === 'fullscreen') {\n      (_a = this.videoContainer) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    const retData = {\n      dismiss: true\n    };\n    this.removeListeners();\n    this.notifyListeners('jeepCapVideoPlayerExit', retData);\n  }\n  handlePlayerReady(data) {\n    this.notifyListeners('jeepCapVideoPlayerReady', data);\n  }\n  addListeners() {\n    document.addEventListener('videoPlayerPlay', ev => {\n      this.handlePlayerPlay(ev.detail);\n    }, false);\n    document.addEventListener('videoPlayerPause', ev => {\n      this.handlePlayerPause(ev.detail);\n    }, false);\n    document.addEventListener('videoPlayerEnded', ev => {\n      this.handlePlayerEnded(ev.detail);\n    }, false);\n    document.addEventListener('videoPlayerReady', ev => {\n      this.handlePlayerReady(ev.detail);\n    }, false);\n    document.addEventListener('videoPlayerExit', () => {\n      this.handlePlayerExit();\n    }, false);\n  }\n  removeListeners() {\n    document.removeEventListener('videoPlayerPlay', ev => {\n      this.handlePlayerPlay(ev.detail);\n    }, false);\n    document.removeEventListener('videoPlayerPause', ev => {\n      this.handlePlayerPause(ev.detail);\n    }, false);\n    document.removeEventListener('videoPlayerEnded', ev => {\n      this.handlePlayerEnded(ev.detail);\n    }, false);\n    document.removeEventListener('videoPlayerReady', ev => {\n      this.handlePlayerReady(ev.detail);\n    }, false);\n    document.removeEventListener('videoPlayerExit', () => {\n      this.handlePlayerExit();\n    }, false);\n  }\n}","map":{"version":3,"names":["WebPlugin","VideoPlayer","CapacitorVideoPlayerWeb","constructor","_players","addListeners","echo","options","_asyncToGenerator","Promise","resolve","result","method","value","initPlayer","_this","message","mode","length","url","playerId","rate","exitOnEnd","Object","keys","includes","exitRet","loopOnEnd","loopRet","componentTag","playerSize","checkSize","_initializeVideoPlayer","isPlaying","_this2","playing","play","_this3","videoEl","pause","_this4","getDuration","_this5","duration","setRate","_this6","rateList","playbackRate","getRate","_this7","setVolume","_this8","volume","getVolume","_this9","setMuted","_this10","muted","getMuted","_this11","setCurrentTime","_this12","seekTime","seektime","currentTime","getCurrentTime","_this13","stopAllPlayers","_this14","i","pipMode","doc","document","pictureInPictureElement","exitPictureInPicture","paused","showController","isControllerIsFullyVisible","exitPlayer","width","height","ratio","window","innerWidth","Math","floor","innerHeight","_this15","videoURL","indexOf","encodeURI","videoContainer","_getContainerElement","initialize","createElement","id","cmpTagEl","querySelector","container","shadowRoot","appendChild","handlePlayerPlay","data","notifyListeners","handlePlayerPause","handlePlayerEnded","_a","remove","removeListeners","handlePlayerExit","retData","dismiss","handlePlayerReady","addEventListener","ev","detail","removeEventListener"],"sources":["/Users/daoduchuy/Learning Ionic/LoginCarmdDemo/node_modules/capacitor-video-player/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport { VideoPlayer } from './web-utils/videoplayer';\nexport class CapacitorVideoPlayerWeb extends WebPlugin {\n    constructor() {\n        super();\n        this._players = [];\n        this.addListeners();\n    }\n    async echo(options) {\n        return Promise.resolve({ result: true, method: 'echo', value: options });\n    }\n    /**\n     *  Player initialization\n     *\n     * @param options\n     */\n    async initPlayer(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'initPlayer',\n                message: 'Must provide a capVideoPlayerOptions object',\n            });\n        }\n        this.mode = options.mode ? options.mode : '';\n        if (this.mode == null || this.mode.length === 0) {\n            return Promise.resolve({\n                result: false,\n                method: 'initPlayer',\n                message: 'Must provide a Mode (fullscreen/embedded)',\n            });\n        }\n        if (this.mode === 'fullscreen' || this.mode === 'embedded') {\n            const url = options.url ? options.url : '';\n            if (url == null || url.length === 0) {\n                return Promise.resolve({\n                    result: false,\n                    method: 'initPlayer',\n                    message: 'Must provide a Video Url',\n                });\n            }\n            if (url == 'internal') {\n                return Promise.resolve({\n                    result: false,\n                    method: 'initPlayer',\n                    message: 'Internal Videos not supported on Web Platform',\n                });\n            }\n            const playerId = options.playerId ? options.playerId : '';\n            if (playerId == null || playerId.length === 0) {\n                return Promise.resolve({\n                    result: false,\n                    method: 'initPlayer',\n                    message: 'Must provide a Player Id',\n                });\n            }\n            const rate = options.rate ? options.rate : 1.0;\n            let exitOnEnd = true;\n            if (Object.keys(options).includes('exitOnEnd')) {\n                const exitRet = options.exitOnEnd;\n                exitOnEnd = exitRet != null ? exitRet : true;\n            }\n            let loopOnEnd = false;\n            if (Object.keys(options).includes('loopOnEnd') && !exitOnEnd) {\n                const loopRet = options.loopOnEnd;\n                loopOnEnd = loopRet != null ? loopRet : false;\n            }\n            const componentTag = options.componentTag\n                ? options.componentTag\n                : '';\n            if (componentTag == null || componentTag.length === 0) {\n                return Promise.resolve({\n                    result: false,\n                    method: 'initPlayer',\n                    message: 'Must provide a Component Tag',\n                });\n            }\n            let playerSize = null;\n            if (this.mode === 'embedded') {\n                playerSize = this.checkSize(options);\n            }\n            const result = await this._initializeVideoPlayer(url, playerId, this.mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize);\n            return Promise.resolve({ result: result });\n        }\n        else {\n            return Promise.resolve({\n                result: false,\n                method: 'initPlayer',\n                message: 'Must provide a Mode either fullscreen or embedded)',\n            });\n        }\n    }\n    /**\n     * Return if a given playerId is playing\n     *\n     * @param options\n     */\n    async isPlaying(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'isPlaying',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const playing = this._players[playerId].isPlaying;\n            return Promise.resolve({\n                method: 'isPlaying',\n                result: true,\n                value: playing,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'isPlaying',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Play the current video from a given playerId\n     *\n     * @param options\n     */\n    async play(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'play',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            await this._players[playerId].videoEl.play();\n            return Promise.resolve({ method: 'play', result: true, value: true });\n        }\n        else {\n            return Promise.resolve({\n                method: 'play',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Pause the current video from a given playerId\n     *\n     * @param options\n     */\n    async pause(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'pause',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            if (this._players[playerId].isPlaying)\n                await this._players[playerId].videoEl.pause();\n            return Promise.resolve({ method: 'pause', result: true, value: true });\n        }\n        else {\n            return Promise.resolve({\n                method: 'pause',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the duration of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getDuration(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getDuration',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const duration = this._players[playerId].videoEl.duration;\n            return Promise.resolve({\n                method: 'getDuration',\n                result: true,\n                value: duration,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getDuration',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Set the rate of the current video from a given playerId\n     *\n     * @param options\n     */\n    async setRate(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'setRate',\n                message: 'Must provide a capVideoRateOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        const rateList = [0.25, 0.5, 0.75, 1.0, 2.0, 4.0];\n        const rate = options.rate && rateList.includes(options.rate) ? options.rate : 1.0;\n        if (this._players[playerId]) {\n            this._players[playerId].videoEl.playbackRate = rate;\n            return Promise.resolve({\n                method: 'setRate',\n                result: true,\n                value: rate,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'setRate',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the volume of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getRate(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getRate',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const rate = this._players[playerId].videoEl.playbackRate;\n            return Promise.resolve({\n                method: 'getRate',\n                result: true,\n                value: rate,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getRate',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Set the volume of the current video from a given playerId\n     *\n     * @param options\n     */\n    async setVolume(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'setVolume',\n                message: 'Must provide a capVideoVolumeOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        const volume = options.volume ? options.volume : 0.5;\n        if (this._players[playerId]) {\n            this._players[playerId].videoEl.volume = volume;\n            return Promise.resolve({\n                method: 'setVolume',\n                result: true,\n                value: volume,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'setVolume',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the volume of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getVolume(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getVolume',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const volume = this._players[playerId].videoEl.volume;\n            return Promise.resolve({\n                method: 'getVolume',\n                result: true,\n                value: volume,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getVolume',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Set the muted property of the current video from a given playerId\n     *\n     * @param options\n     */\n    async setMuted(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'setMuted',\n                message: 'Must provide a capVideoMutedOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        const muted = options.muted ? options.muted : false;\n        if (this._players[playerId]) {\n            this._players[playerId].videoEl.muted = muted;\n            return Promise.resolve({\n                method: 'setMuted',\n                result: true,\n                value: muted,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'setMuted',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the muted property of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getMuted(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getMuted',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const muted = this._players[playerId].videoEl.muted;\n            return Promise.resolve({\n                method: 'getMuted',\n                result: true,\n                value: muted,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getMuted',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Set the current time of the current video from a given playerId\n     *\n     * @param options\n     */\n    async setCurrentTime(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'setCurrentTime',\n                message: 'Must provide a capVideoTimeOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        let seekTime = options.seektime ? options.seektime : 0;\n        if (this._players[playerId]) {\n            const duration = this._players[playerId].videoEl.duration;\n            seekTime =\n                seekTime <= duration && seekTime >= 0 ? seekTime : duration / 2;\n            this._players[playerId].videoEl.currentTime = seekTime;\n            return Promise.resolve({\n                method: 'setCurrentTime',\n                result: true,\n                value: seekTime,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'setCurrentTime',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the current time of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getCurrentTime(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getCurrentTime',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const seekTime = this._players[playerId].videoEl.currentTime;\n            return Promise.resolve({\n                method: 'getCurrentTime',\n                result: true,\n                value: seekTime,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getCurrentTime',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the current time of the current video from a given playerId\n     *\n     */\n    async stopAllPlayers() {\n        for (const i in this._players) {\n            if (this._players[i].pipMode) {\n                const doc = document;\n                if (doc.pictureInPictureElement) {\n                    await doc.exitPictureInPicture();\n                }\n            }\n            if (!this._players[i].videoEl.paused)\n                this._players[i].videoEl.pause();\n        }\n        return Promise.resolve({\n            method: 'stopAllPlayers',\n            result: true,\n            value: true,\n        });\n    }\n    /**\n     * Show controller\n     *\n     */\n    async showController() {\n        return Promise.resolve({\n            method: 'showController',\n            result: true,\n            value: true,\n        });\n    }\n    /**\n     * isControllerIsFullyVisible\n     *\n     */\n    async isControllerIsFullyVisible() {\n        return Promise.resolve({\n            method: 'isControllerIsFullyVisible',\n            result: true,\n            value: true,\n        });\n    }\n    /**\n     * Exit the current player\n     *\n     */\n    async exitPlayer() {\n        return Promise.resolve({\n            method: 'exitPlayer',\n            result: true,\n            value: true,\n        });\n    }\n    checkSize(options) {\n        const playerSize = {\n            width: options.width ? options.width : 320,\n            height: options.height ? options.height : 180,\n        };\n        const ratio = playerSize.height / playerSize.width;\n        if (playerSize.width > window.innerWidth) {\n            playerSize.width = window.innerWidth;\n            playerSize.height = Math.floor(playerSize.width * ratio);\n        }\n        if (playerSize.height > window.innerHeight) {\n            playerSize.height = window.innerHeight;\n            playerSize.width = Math.floor(playerSize.height / ratio);\n        }\n        return playerSize;\n    }\n    async _initializeVideoPlayer(url, playerId, mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize) {\n        const videoURL = url\n            ? url.indexOf('%2F') == -1\n                ? encodeURI(url)\n                : url\n            : null;\n        if (videoURL === null)\n            return Promise.resolve(false);\n        this.videoContainer =\n            await this._getContainerElement(playerId, componentTag);\n        if (this.videoContainer === null)\n            return Promise.resolve({\n                method: 'initPlayer',\n                result: false,\n                message: 'componentTag or divContainerElement must be provided',\n            });\n        if (mode === 'embedded' && playerSize == null)\n            return Promise.resolve({\n                method: 'initPlayer',\n                result: false,\n                message: 'playerSize must be defined in embedded mode',\n            });\n        if (mode === 'embedded') {\n            this._players[playerId] = new VideoPlayer('embedded', videoURL, playerId, rate, exitOnEnd, loopOnEnd, this.videoContainer, 2, playerSize.width, playerSize.height);\n            await this._players[playerId].initialize();\n        }\n        else if (mode === 'fullscreen') {\n            this._players['fullscreen'] = new VideoPlayer('fullscreen', videoURL, 'fullscreen', rate, exitOnEnd, loopOnEnd, this.videoContainer, 99995);\n            await this._players['fullscreen'].initialize();\n        }\n        else {\n            return Promise.resolve({\n                method: 'initPlayer',\n                result: false,\n                message: 'mode not supported',\n            });\n        }\n        return Promise.resolve({ method: 'initPlayer', result: true, value: true });\n    }\n    async _getContainerElement(playerId, componentTag) {\n        const videoContainer = document.createElement('div');\n        videoContainer.id = `vc_${playerId}`;\n        if (componentTag != null && componentTag.length > 0) {\n            const cmpTagEl = document.querySelector(`${componentTag}`);\n            if (cmpTagEl === null)\n                return Promise.resolve(null);\n            let container = null;\n            const shadowRoot = cmpTagEl.shadowRoot ? cmpTagEl.shadowRoot : null;\n            if (shadowRoot != null) {\n                container = shadowRoot.querySelector(`[id='${playerId}']`);\n            }\n            else {\n                container = cmpTagEl.querySelector(`[id='${playerId}']`);\n            }\n            if (container != null)\n                container.appendChild(videoContainer);\n            return Promise.resolve(videoContainer);\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    handlePlayerPlay(data) {\n        this.notifyListeners('jeepCapVideoPlayerPlay', data);\n    }\n    handlePlayerPause(data) {\n        this.notifyListeners('jeepCapVideoPlayerPause', data);\n    }\n    handlePlayerEnded(data) {\n        var _a;\n        if (this.mode === 'fullscreen') {\n            (_a = this.videoContainer) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.removeListeners();\n        this.notifyListeners('jeepCapVideoPlayerEnded', data);\n    }\n    handlePlayerExit() {\n        var _a;\n        if (this.mode === 'fullscreen') {\n            (_a = this.videoContainer) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        const retData = { dismiss: true };\n        this.removeListeners();\n        this.notifyListeners('jeepCapVideoPlayerExit', retData);\n    }\n    handlePlayerReady(data) {\n        this.notifyListeners('jeepCapVideoPlayerReady', data);\n    }\n    addListeners() {\n        document.addEventListener('videoPlayerPlay', (ev) => {\n            this.handlePlayerPlay(ev.detail);\n        }, false);\n        document.addEventListener('videoPlayerPause', (ev) => {\n            this.handlePlayerPause(ev.detail);\n        }, false);\n        document.addEventListener('videoPlayerEnded', (ev) => {\n            this.handlePlayerEnded(ev.detail);\n        }, false);\n        document.addEventListener('videoPlayerReady', (ev) => {\n            this.handlePlayerReady(ev.detail);\n        }, false);\n        document.addEventListener('videoPlayerExit', () => {\n            this.handlePlayerExit();\n        }, false);\n    }\n    removeListeners() {\n        document.removeEventListener('videoPlayerPlay', (ev) => {\n            this.handlePlayerPlay(ev.detail);\n        }, false);\n        document.removeEventListener('videoPlayerPause', (ev) => {\n            this.handlePlayerPause(ev.detail);\n        }, false);\n        document.removeEventListener('videoPlayerEnded', (ev) => {\n            this.handlePlayerEnded(ev.detail);\n        }, false);\n        document.removeEventListener('videoPlayerReady', (ev) => {\n            this.handlePlayerReady(ev.detail);\n        }, false);\n        document.removeEventListener('videoPlayerExit', () => {\n            this.handlePlayerExit();\n        }, false);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}